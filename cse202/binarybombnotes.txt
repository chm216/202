() mean contains pointer to next node

0x604380 <node6>:       0x00000156      0x00000006      0x00604370 (342)
0x604370 <node5>:       0x00000395      0x00000005      0x00604360 (917)
0x604360 <node4>:       0x00000261      0x00000004      0x00604350 (609)
0x604350 <node3>:       0x000003a2      0x00000003      0x00604340 (930)
0x604340 <node2>:       0x0000024c      0x00000002      0x00604330 (588)
0x604330 <node1>:       0x000001e5      0x00000001      0x00000000 (485)

WANT: SMALLER GREATER

Least to Greatest: nodes pointers: 6>5>3>2>4 , 1>6>5>3>2>4
6 1 2 4 5 3
Trial: 
eax=0x156, node 6, 342    rbx: node 1 , 485 : passes (or is it node 4, 609)
eax=0x395, node 5, 917    rbx: node 6 , 342 : fails (or is it node 4, 609)
Greatest to Least:
3 5 4 2 1 6
Trial:
eax=0x24c, node 2, 588    rbx: node 4, 609 : passes (or is it node1, 485)
eax=0x3a2, node 3, 930    rbx: node 2, 588 : fails (or is it node1, 485)


3 5 2 4 1 6
Trial:
eax=0x24c, node 2, 588    rbx: node 4, 609 : passes
eax=0x395, node 5, 917    rbx: node 2, 588: fails


3 5 1 6 2 4
Trial:
eax=0x24c, node 2, 588    rbx: node 4, 609 : passes
eax=0x156, node 6, 342    rbx: node 2, 588: passes
eax=0x1e5, node 1, 485    rbx: node 6, 342


3 5 6 1 2 4
Trial:
eax=0x24c, node 2, 588    rbx: node 4, 609 : passes
eax=1e5, node 1, 485      rbx:node 2, 588:passes
eax=0x156, node 6, 342    rbx:node 1, 485: passes


1 6 3 5 2 4
Trial:
eax=1e5, node1, 485        rbx=

6 1 3 5 2 4
Trial:
eax=x156, node 6, 342


4 2 3 5 6 1
Trial:
eax =x395, node 5, 917    rbx=node3, 930
eax =x261,node 4, 609     rbx =node 5, 917
eax=0x24c, node 2, 588    rbx = node4, 609
eax=1e5,node 1 , 485      rbx=node 2, 588
eax=156,node 6, 342       rbx=node 1 ,485


4 2 3 5 1 6
















5 3 2 4 1
Trial:
eax=0x261 , node4, 609   rbx=:node 2, 588 : fails



6 3 1 5 2 4
Trial:
eax=0x261 , node 4, 609   rbx-: node 1, 485: fails


1 6 5 3 2 4 (nodes point like least to greatest)
Trial:
eax=0x1e5, node 1, 485   rbx= node 6, 342 : fails


   0x00000000004012e6 <+244>:   mov    0x8(%rbx),%rax
   0x00000000004012ea <+248>:   mov    (%rax),%eax
   0x00000000004012ec <+250>:   cmp    %eax,(%rbx)
   0x00000000004012ee <+252>:   jge    0x4012f5 <phase_6+259>
=> 0x00000000004012f0 <+254>:   callq  0x40171b <explode_bomb>
   0x00000000004012f5 <+259>:   mov    0x8(%rbx),%rbx
   0x00000000004012f9 <+263>:   sub    $0x1,%ebp
   0x00000000004012fc <+266>:   jne    0x4012e6 <phase_6+244>

left goes to where first number points to and second is where the first points to
so rbx is straightfoward its the number u choose (aka the second number)
eax is whatever rbx points to

5 3 2 4 6 1
Trial:
eax=0x261 , node 4, 609        rbx= node 2, 588

3 5 2 4 6 1
Trial:
eax=0x24c, node 2, 588         rbx= node 4, 609 :passes
eax=0x395, node 5, 917         rbx=node 2, 588


2 4 5 3 6 1
Trial:
eax= 0x3a2, node 3, 930       rbx= node 5, 917

2 4 3 5 6 1
Trial:
eax =0x3a2, node 3, 930       rbx= node 5, 917

3 2 5 4 1 6
Trial:
eax= node 2  ,   rbx= node 4

